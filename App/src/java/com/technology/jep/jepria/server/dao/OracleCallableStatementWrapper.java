package com.technology.jep.jepria.server.dao;

import java.sql.CallableStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

/**
 * Класс-обёртка для {@link CallableStatement}, реализующий особенности взаимодействия с Oracle.
 * <ul>
 *   <li>Методы, которые должны вернуть {@link ResultSet}, возвращают {@link ResultSetWrapper}.</li>
 *   <li>Если при вызове {@link CallableStatement#execute} было получено исключение
 *       ORA-04068: Existing state of packages has been discarded, то метод вызывается повторно.</li>
 * </ul>
 * @author EydlinA
 *
 */
public class OracleCallableStatementWrapper extends CallableStatementWrapper {

  /**
   * ORA-код исключения Existing state of packages has been discarded.
   */
  private static final String PACKAGE_STATE_DISCARDED_ERROR_CODE = "ORA-04068";
  
  /**
   * Конструктор извне не вызывается.
   * @param cs an instance of {@link CallableStatement} to wrap
   */
  private OracleCallableStatementWrapper(CallableStatement cs) {
    super(cs);
  }
  
  /**
   * Wraps an instance of {@link CallableStatement} to inject Oracle-specific functionality.
   * @param cs instance to wrap
   * @return @return new instance of {@link OracleCallableStatementWrapper} wrapping the CallableStatement, or {@code null} if the argument is {@code null}.
   */
  public static OracleCallableStatementWrapper wrap(CallableStatement cs) {
    if (cs == null) {
      return null;
    } else {
      return new OracleCallableStatementWrapper(cs);
    }
  }

  /**
   * {@inheritDoc}
   */
  @Override
  public ResultSet executeQuery(String sql) throws SQLException {
    return ResultSetWrapper.wrap(super.executeQuery(sql));
  }

  /**
   * {@inheritDoc}
   */
  @Override
  public ResultSet executeQuery() throws SQLException {
    return ResultSetWrapper.wrap(super.executeQuery());
  }

  /**
   * {@inheritDoc}
   */
  @Override
  public ResultSet getResultSet() throws SQLException {
    return ResultSetWrapper.wrap(super.getResultSet());
  }

  /**
   * {@inheritDoc}
   */
  @Override
  public ResultSet getGeneratedKeys() throws SQLException {
    return ResultSetWrapper.wrap(super.getGeneratedKeys());
  }

  /**
   * {@inheritDoc}
   */
  @Override
  public int executeUpdate(String sql) throws SQLException {
    try {
      return super.executeUpdate(sql);
    } catch (SQLException e) {
      if (e.getMessage().startsWith(PACKAGE_STATE_DISCARDED_ERROR_CODE)) {
        return this.executeUpdate(sql);
      } else {
        throw e;
      }
    }
  }

  /**
   * {@inheritDoc}
   */
  @Override
  public int executeUpdate() throws SQLException {
    try {
      return super.executeUpdate();
    } catch (SQLException e) {
      if (e.getMessage().startsWith(PACKAGE_STATE_DISCARDED_ERROR_CODE)) {
        return this.executeUpdate();
      } else {
        throw e;
      }
    }
  }

  /**
   * {@inheritDoc}
   */
  @Override
  public boolean execute(String sql) throws SQLException {
    try {
      return super.execute(sql);
    } catch (SQLException e) {
      if (e.getMessage().startsWith(PACKAGE_STATE_DISCARDED_ERROR_CODE)) {
        return this.execute(sql);
      } else {
        throw e;
      }
    }
  }

  /**
   * {@inheritDoc}
   */
  @Override
  public boolean execute() throws SQLException {
    try {
      return super.execute();
    } catch (SQLException e) {
      if (e.getMessage().startsWith(PACKAGE_STATE_DISCARDED_ERROR_CODE)) {
        return this.execute();
      } else {
        throw e;
      }
    }
  }

  /**
   * {@inheritDoc}
   */
  @Override
  public int[] executeBatch() throws SQLException {
    try {
      return super.executeBatch();
    } catch (SQLException e) {
      if (e.getMessage().startsWith(PACKAGE_STATE_DISCARDED_ERROR_CODE)) {
        return this.executeBatch();
      } else {
        throw e;
      }
    }
  }

  /**
   * {@inheritDoc}
   */
  @Override
  public int executeUpdate(String sql, int autoGeneratedKeys) throws SQLException {
    try {
      return super.executeUpdate(sql, autoGeneratedKeys);
    } catch (SQLException e) {
      if (e.getMessage().startsWith(PACKAGE_STATE_DISCARDED_ERROR_CODE)) {
        return this.executeUpdate(sql, autoGeneratedKeys);
      } else {
        throw e;
      }
    }
  }

  /**
   * {@inheritDoc}
   */
  @Override
  public int executeUpdate(String sql, int[] columnIndexes) throws SQLException {
    try {
      return super.executeUpdate(sql, columnIndexes);
    } catch (SQLException e) {
      if (e.getMessage().startsWith(PACKAGE_STATE_DISCARDED_ERROR_CODE)) {
        return this.executeUpdate(sql, columnIndexes);
      } else {
        throw e;
      }
    }
  }

  @Override
  public int executeUpdate(String sql, String[] columnNames) throws SQLException {
    try {
      return super.executeUpdate(sql, columnNames);
    } catch (SQLException e) {
      if (e.getMessage().startsWith(PACKAGE_STATE_DISCARDED_ERROR_CODE)) {
        return this.executeUpdate(sql, columnNames);
      } else {
        throw e;
      }
    }
  }

  @Override
  public boolean execute(String sql, int autoGeneratedKeys) throws SQLException {
    try {
      return super.execute(sql, autoGeneratedKeys);
    } catch (SQLException e) {
      if (e.getMessage().startsWith(PACKAGE_STATE_DISCARDED_ERROR_CODE)) {
        return this.execute(sql, autoGeneratedKeys);
      } else {
        throw e;
      }
    }
  }

  @Override
  public boolean execute(String sql, int[] columnIndexes) throws SQLException {
    try {
      return super.execute(sql, columnIndexes);
    } catch (SQLException e) {
      if (e.getMessage().startsWith(PACKAGE_STATE_DISCARDED_ERROR_CODE)) {
        return this.execute(sql, columnIndexes);
      } else {
        throw e;
      }
    }
  }

  /**
   * {@inheritDoc}
   */
  @Override
  public boolean execute(String sql, String[] columnNames) throws SQLException {
    try {
      return super.execute(sql, columnNames);
    } catch (SQLException e) {
      if (e.getMessage().startsWith(PACKAGE_STATE_DISCARDED_ERROR_CODE)) {
        return this.execute(sql, columnNames);
      } else {
        throw e;
      }
    }
  }  
}
