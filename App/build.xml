<project name="Jep Module Building" default="build">
  <taskdef resource="net/sf/antcontrib/antlib.xml" />
  <property file="local.properties" />
  <property environment="env" />
  <if>
    <isset property="env.BIN_HOME" />
    <then>
      <property name="BIN_HOME" value="${env.BIN_HOME}" />
    </then>
  </if>
  <if>
    <isset property="BIN_HOME" />
    <then>
      <echo message="Binary repository path: ${BIN_HOME}" />        
    </then>
    <else>
      <fail message="Binary repository path not specified. Specify it either in environment variable %BIN_HOME% or use -DBIN_HOME=... command line argument." />
    </else>
  </if>
  <property file="dependency.properties" />
  <property file="build.properties" />
  <property name="MODULE_PACKAGE" value="com/technology/${PROJECT_NAME_IN_PACKAGE}/${MODULE_NAME_IN_PACKAGE}" />
  <property name="RESOURCE_HOME" value="src/resources/${MODULE_PACKAGE}" />
  <property name="JAVA_DOC_DIR" value="../Doc/App/AutoGen" />

  <property name="LOG_LEVEL" value="info" />

  <path id="libs">
    <pathelement location="${GWT-USER_LIB}" />
    <pathelement location="${GWT-DEV_LIB}" />
    <pathelement location="${GWT-LOG_LIB}" />

    <pathelement location="${GWT-SERVLET_LIB}" />
    <pathelement location="${LOG4J_LIB}" />
    <pathelement location="${COMMONS-FILEUPLOAD_LIB}" />
    <pathelement location="${JUNIT_LIB}" />
    <pathelement location="${OJDBC6DMS_LIB}" />
  	
  	<pathelement location="${SSO-UTILS_LIB}" />
  	
  	<!-- REST/JAX-RS -->
  	<pathelement location="${JERSEY-JAVAX-WS-RS-API_LIB}" />
  	<pathelement location="${JERSEY-JERSEY-SERVER_LIB}" />
  	<pathelement location="${JERSEY-JERSEY-COMMON_LIB}" />
    <pathelement location="${JERSEY-HK2-API_LIB}" />
    <pathelement location="${JERSEY-JAVAX-INJECT_LIB}" />
  	
  </path>
	
	<path id="jepria-versionizer-libs">
    <pathelement location="${JEPRIA-VERSIONIZER_LIB}" />
		<pathelement location="${JSOUP_LIB}" />
  </path>
	
  <path id="selenium-libs">
    <pathelement location="${SELENIUM_LIB}" />
    
    <pathelement location="${APACHE-MIME4J_LIB}" />
    <pathelement location="${BEANSHELL_LIB}" />
    <pathelement location="${CGLIB-NODEP_LIB}" />
    <pathelement location="${COMMONS-CODEC_LIB}" />
    <pathelement location="${COMMONS-COLLECTIONS_LIB}" />
    <pathelement location="${COMMONS-EXEC_LIB}" />
    <pathelement location="${COMMONS-IO_LIB}" />
    <pathelement location="${COMMONS-JXPATH_LIB}" />
    <pathelement location="${COMMONS-LANG3_LIB}" />
    <pathelement location="${COMMONS-LOGGING_LIB}" />
    <pathelement location="${CSSPARSER_LIB}" />
    <pathelement location="${GUAVA_LIB}" />
    <pathelement location="${HAMCREST-CORE_LIB}" />
    <pathelement location="${HAMCREST-LIBRARY_LIB}" />
    <pathelement location="${HTMLUNIT_LIB}" />
    <pathelement location="${HTMLUNIT-CORE-JS_LIB}" />
    <pathelement location="${HTTPCLIENT_LIB}" />
    <pathelement location="${HTTPCORE_LIB}" />
    <pathelement location="${HTTPMIME_LIB}" />
    <pathelement location="${INI4J_LIB}" />
    <pathelement location="${JCOMMANDER_LIB}" />
    <pathelement location="${JETTY-WEBSOCKET_LIB}" />
    <pathelement location="${JNA_LIB}" />
    <pathelement location="${JNA-PLATFORM_LIB}" />
    <pathelement location="${JSON_LIB}" />
    <pathelement location="${JUNIT-DEP_LIB}" />
    <pathelement location="${NEKOHTML_LIB}" />
    <pathelement location="${NETTY_LIB}" />
    <pathelement location="${OPERADRIVER_LIB}" />
    <pathelement location="${PHANTOMJSDRIVER_LIB}" />
    <pathelement location="${PROTOBUF-JAVA_LIB}" />
    <pathelement location="${SAC_LIB}" />
    <pathelement location="${SERIALIZER_LIB}" />
    <pathelement location="${TESTNG_LIB}" />
    <pathelement location="${XALAN_LIB}" />
    <pathelement location="${XERCESIMPL_LIB}" />
    <pathelement location="${XML-APIS_LIB}" />
  </path>
  
  <path id="powermock-libs">
    <pathelement location="${CGLIB_NODEP22_LIB}" />
    <pathelement location="${HAMCREST-CORE_LIB}" />
    <pathelement location="${JAVASSIST_LIB}" />
    <pathelement location="${MOCKITO-CORE_LIB}" />
    <pathelement location="${OBJENESIS_LIB}" />
    <pathelement location="${POWERMOCK-API-MOCKITO-COMMON_LIB}" />
    <pathelement location="${POWERMOCK-MOCKITO-LIB}" />
  </path>
  
  <path id="tomcat-libs">
    <pathelement location="${TOMCAT-CATALINA_LIB}" />
  </path>

  <path id="gwt-libs">
    <pathelement location="${GWT-USER_LIB}" />
    <pathelement location="${GWT-DEV_LIB}" />
    <pathelement location="${GWT-LOG_LIB}" />
  </path>

  <fileset id="class-jar" dir="build">
    <include name="**/*.class" />
  </fileset>

  <fileset id="src-jar" dir="src/java">
    <include name="**/client/**/*.java" />
    <include name="**/client/**/*.html" />
    <include name="**/client/**/*.css" />
	<include name="**/client/**/*.ui.xml" />
    <exclude name="**/overview.html" />
    <exclude name="**/package.html" />
    <include name="**/shared/**/*.java" />
    <include name="**/images/*.png" />
    <include name="**/images/*.gif" />
    <include name="**/${MODULE_NAME}Text.properties" />
    <include name="**/${MODULE_NAME}Text_??.properties" />
    <include name="**/LoginText.properties" />
    <include name="**/LoginText_??.properties" />
    <include name="**/${MODULE_NAME}.gwt.xml" />
  </fileset>

  <fileset id="class-auto-jar" dir="build-auto">
    <include name="**/*.class" />
  </fileset>
  <fileset id="class-test-jar" dir="build-test">
    <include name="**/*.class" />
  </fileset>
  <fileset id="resources-jar" dir="src">
    <include name="**/html/**/*.*" />
    <include name="**/resources/**/*.*" />
  </fileset>
	
  <fileset id="dependency-jar" file="dependency.properties"/>
	
	<target name="create-version">
		<input message="Enter target Jepria version name (like 1.0.0):" addproperty="target.version"/>
		<java classname="org.jepria.versionizer.Main">
		  <classpath refid="jepria-versionizer-libs" />
			<arg value="-Dfile.encoding=UTF-8"/>
			<arg value="--core" />
			<arg value=".." />
			<arg value="${target.version}" />
		</java>
	</target>
	
  <!-- Проверка наличия всех используемых библиотек (зависимостей) -->
  <target name="check-dependencies" >
    <propertyselector
        property="pack.list"
        delimiter=","
        match="([^\s]+(\_(?i)(lib|jslib))$)"
        select="\1"
        casesensitive="false" />
                 
    <echo message="Dependency checking..."/>
    <for list="${pack.list}" param="lib-path">
      <sequential>
        <if> <available file="${@{lib-path}}"/>
          <then/>
          <else>
            <echo>Required library '${@{lib-path}}' is absent</echo>
            <property name="DEPENDENCY_ABSENCE" value="true" />
          </else>
        </if>
      </sequential>
    </for>
    <if> <equals arg1="${DEPENDENCY_ABSENCE}" arg2="true" />
      <then>
        <echo>Dependency checking failed</echo>
        <fail message="BINARY REPOSITORY PROBABLY SHOULD BE UPDATED"/>
      </then>
    </if>
    <echo message="Dependency checking succeeded"/>
  </target>

  <target name="start-log" depends="check-dependencies">
    <mkdir dir="log" />
    <tstamp>
      <format property="timestamp" pattern="yyyyMMdd_HHmmss" />
    </tstamp>
    <record name="log/${timestamp}-${MODULE_NAME}-${CURRENT_VERSION}-${PROJECT_NAME}.txt" loglevel="${LOG_LEVEL}" />
  </target>

  <target name="text-resources-update-check" depends="start-log">
    <uptodate targetfile="src/java/${MODULE_PACKAGE}/shared/text/${MODULE_NAME}Text.java" property="text-resources-is-uptodate">
      <srcfiles dir="src/java/${MODULE_PACKAGE}/shared/text" includes="*.properties" />
    </uptodate>
  </target>

  <target name="encode-text-resources" depends="text-resources-update-check" unless="text-resources-is-uptodate">
    <native2ascii encoding="UTF-8" src="src/java/${MODULE_PACKAGE}/shared/text" dest="src/java/${MODULE_PACKAGE}/shared/text" ext=".target_properties" includes="**/*_Source.properties" />
    <move file="src/java/${MODULE_PACKAGE}/shared/text/${MODULE_NAME}Text_Source.target_properties" tofile="src/java/${MODULE_PACKAGE}/shared/text/${MODULE_NAME}Text.properties" />
  </target>

  <target name="encode-text-for-gwt" depends="encode-text-resources" unless="text-resources-is-uptodate">
    <java classname="com.google.gwt.i18n.tools.I18NSync">
      <classpath>
        <pathelement location="src/java" />
        <path refid="gwt-libs" />
      </classpath>
      <arg value="-out" />
      <arg value="src/java" />
      <arg value="com.technology.${PROJECT_NAME_IN_PACKAGE}.${MODULE_NAME_IN_PACKAGE}.shared.text.${MODULE_NAME}Text" />
    </java>
  </target>

  <target name="java-compile" depends="encode-text-for-gwt">
    <mkdir dir="build" />
    <javac srcdir="src/java" destdir="build" debug="on" encoding="utf-8" includeantruntime="false">
      <classpath refid="tomcat-libs" />
      <classpath refid="libs" />
    </javac>
  </target>

  <target name="java-auto-compile" depends="java-compile">
    <mkdir dir="build-auto" />
    <javac srcdir="auto/java" destdir="build-auto" debug="on" encoding="utf-8" includeantruntime="false">
      <classpath refid="libs" />
      <classpath refid="selenium-libs" />
      <classpath>
        <pathelement location="build" />
      </classpath>
    </javac>
  </target>

  <target name="java-test-compile" depends="java-compile, java-auto-compile">
    <mkdir dir="build-test" />
    <javac srcdir="test/java" destdir="build-test" debug="on" encoding="utf-8" includeantruntime="false">
      <classpath refid="libs" />
      <classpath refid="selenium-libs" />
      <classpath refid="powermock-libs" />
      <classpath>
        <pathelement location="build" />
        <pathelement location="build-auto" />
      </classpath>
      <classpath>
        <pathelement location="${SPRING-MOCK_LIB}"/>
        <pathelement location="${GWT-TEST-UTILS_LIB}"/>
      </classpath>        
    </javac>
  </target>

  <target name="jar-update-check" depends="java-compile">
    <uptodate targetfile="${DISTR_DIR}/${MODULE_NAME_IN_PACKAGE}-${CURRENT_VERSION}.jar" property="jar-is-uptodate">
      <srcfiles refid="class-jar" />
      <srcfiles refid="src-jar" />
    </uptodate>
  </target>

  <target name="jar" depends="jar-update-check" unless="jar-is-uptodate">
    <jar destfile="${DISTR_DIR}/${MODULE_NAME_IN_PACKAGE}-${CURRENT_VERSION}.jar">
      <fileset refid="class-jar" />
      <fileset refid="src-jar" />
    </jar>
  </target>

  <target name="jar-auto-update-check" depends="java-auto-compile">
    <uptodate targetfile="${DISTR_DIR}/${MODULE_NAME_IN_PACKAGE}-auto-${CURRENT_VERSION}.jar" property="jar-auto-is-uptodate">
      <srcfiles refid="class-auto-jar" />
    </uptodate>
  </target>

  <target name="jar-auto" depends="jar-auto-update-check" unless="jar-auto-is-uptodate">
    <jar destfile="${DISTR_DIR}/${MODULE_NAME_IN_PACKAGE}-auto-${CURRENT_VERSION}.jar">
      <fileset refid="class-auto-jar" />
    </jar>
  </target>
	
  <target name="jar-dependency">
    <jar destfile="${DISTR_DIR}/${MODULE_NAME_IN_PACKAGE}-dependency-${CURRENT_VERSION}.jar">
      <fileset refid="dependency-jar" />
    </jar>
  </target>

  <target name="jar-test-update-check" depends="java-test-compile">
    <uptodate targetfile="${DISTR_DIR}/${MODULE_NAME_IN_PACKAGE}-test-${CURRENT_VERSION}.jar" property="jar-test-is-uptodate">
      <srcfiles refid="class-test-jar" />
    </uptodate>
  </target>

  <target name="jar-test" depends="jar-test-update-check" unless="jar-test-is-uptodate">
    <jar destfile="${DISTR_DIR}/${MODULE_NAME_IN_PACKAGE}-test-${CURRENT_VERSION}.jar">
      <fileset refid="class-test-jar" />
    </jar>
  </target>

  <target name="jar-resources-update-check">
    <uptodate targetfile="${DISTR_DIR}/${MODULE_NAME_IN_PACKAGE}-resources-${CURRENT_VERSION}.jar" property="jar-resources-is-uptodate">
      <srcfiles refid="resources-jar" />
    </uptodate>
  </target>

  <target name="jar-resources" depends="jar-resources-update-check, start-log" unless="jar-resources-is-uptodate">
    <jar destfile="${DISTR_DIR}/${MODULE_NAME_IN_PACKAGE}-resources-${CURRENT_VERSION}.jar">
      <fileset refid="resources-jar" />
    </jar>
  </target>
  
  <target name="test" depends = "jar-test">
    <echo message="test"/>
    <junit fork="yes" printsummary="yes">
      <classpath refid="libs" />
      <classpath refid="powermock-libs" />
      <classpath>
        <pathelement location="build" />
        <pathelement location="build-test" />
      </classpath>
      <formatter type="plain" usefile="false" />
      <batchtest>
        <zipfileset src="${DISTR_DIR}/${MODULE_NAME_IN_PACKAGE}-test-${CURRENT_VERSION}.jar" includes="com/technology/jep/jepria/**/*Test.class" />
      </batchtest>
    </junit>
  </target>

  <target name="build" depends="jar, jar-auto, jar-test, jar-resources, jar-dependency" />

  <target name="doc" depends="java-compile, java-auto-compile">
    <delete includeemptydirs="true" dir="${JAVA_DOC_DIR}"/>
    <javadoc sourcepath="src/java;auto/java;test/java"
      locale="ru"
      packagenames="*"
      includenosourcepackages="true"
      overview="src/java/${MODULE_PACKAGE}/overview.html"
      destdir="${JAVA_DOC_DIR}"
      encoding="UTF-8"
      docencoding="UTF-8"
      charset="UTF-8"
      access="private"
      additionalparam="-notimestamp -Xdoclint:none"
      Windowtitle="${MODULE_NAME} JavaDoc"
      Doctitle="${MODULE_NAME} API Reference">
      <classpath refid="libs" />
      <classpath refid="tomcat-libs" />
      <classpath refid="selenium-libs" />
      <classpath refid="powermock-libs" />
      <classpath>
        <pathelement location="${SPRING-MOCK_LIB}"/>
        <pathelement location="${GWT-TEST-UTILS_LIB}"/>
      </classpath>   
    </javadoc>
  </target>

  <target name="doc-with-test" depends="java-compile, java-test-compile">
    <javadoc sourcepath="src/java;auto/java"
      packagenames="*"
      includenosourcepackages="true"
      overview="src/java/${MODULE_PACKAGE}/overview.html"
      destdir="${JAVA_DOC_DIR}"
      encoding="UTF-8"
      docencoding="UTF-8"
      charset="UTF-8"
      access="private"
      additionalparam="-notimestamp -Xdoclint:none"
      Windowtitle="${MODULE_NAME} JavaDoc (with test)"
      Doctitle="${MODULE_NAME} API Reference (with test)">
      <classpath refid="libs" />
      <classpath refid="tomcat-libs" />
      <classpath refid="selenium-libs" />
      <classpath refid="powermock-libs" />
    </javadoc>
  </target>

  <target name="clean" depends="start-log">
    <delete includeemptydirs="true" quiet="true">
      <fileset dir="build" />
      <fileset dir="build-test" />
      <fileset dir="build-auto" />
    </delete>
    
    <delete file="${DISTR_DIR}/${MODULE_NAME_IN_PACKAGE}-${CURRENT_VERSION}.jar"/>
    <delete file="${DISTR_DIR}/${MODULE_NAME_IN_PACKAGE}-auto-${CURRENT_VERSION}.jar"/>
    <delete file="${DISTR_DIR}/${MODULE_NAME_IN_PACKAGE}-resources-${CURRENT_VERSION}.jar"/>
    <delete file="${DISTR_DIR}/${MODULE_NAME_IN_PACKAGE}-test-${CURRENT_VERSION}.jar"/>
  </target>
</project>